{"id":"node_modules/merge-stream/index.js","dependencies":[{"name":"C:\\Users\\franc\\Desktop\\Francesco\\Start2Impact\\Full Stack Developer\\Progetti\\air-pollution\\package.json","includedInParent":true,"mtime":1632861785932},{"name":"C:\\Users\\franc\\Desktop\\Francesco\\Start2Impact\\Full Stack Developer\\Progetti\\air-pollution\\node_modules\\merge-stream\\package.json","includedInParent":true,"mtime":1632858199734},{"name":"stream","loc":{"line":3,"column":32},"parent":"C:\\Users\\franc\\Desktop\\Francesco\\Start2Impact\\Full Stack Developer\\Progetti\\air-pollution\\node_modules\\merge-stream\\index.js","resolved":"C:\\Users\\franc\\Desktop\\Francesco\\Start2Impact\\Full Stack Developer\\Progetti\\air-pollution\\node_modules\\stream-browserify\\index.js"}],"generated":{"js":"'use strict';\n\nconst { PassThrough } = require('stream');\n\nmodule.exports = function (/*streams...*/) {\n  var sources = []\n  var output  = new PassThrough({objectMode: true})\n\n  output.setMaxListeners(0)\n\n  output.add = add\n  output.isEmpty = isEmpty\n\n  output.on('unpipe', remove)\n\n  Array.prototype.slice.call(arguments).forEach(add)\n\n  return output\n\n  function add (source) {\n    if (Array.isArray(source)) {\n      source.forEach(add)\n      return this\n    }\n\n    sources.push(source);\n    source.once('end', remove.bind(null, source))\n    source.once('error', output.emit.bind(output, 'error'))\n    source.pipe(output, {end: false})\n    return this\n  }\n\n  function isEmpty () {\n    return sources.length == 0;\n  }\n\n  function remove (source) {\n    sources = sources.filter(function (it) { return it !== source })\n    if (!sources.length && output.readable) { output.end() }\n  }\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/merge-stream/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/merge-stream/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/merge-stream/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/merge-stream/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/merge-stream/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/merge-stream/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/merge-stream/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/merge-stream/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/merge-stream/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/merge-stream/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/merge-stream/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/merge-stream/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/merge-stream/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/merge-stream/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/merge-stream/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/merge-stream/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/merge-stream/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/merge-stream/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/merge-stream/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/merge-stream/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/merge-stream/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/merge-stream/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/merge-stream/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/merge-stream/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/merge-stream/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/merge-stream/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/merge-stream/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/merge-stream/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/merge-stream/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/merge-stream/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/merge-stream/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/merge-stream/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/merge-stream/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/merge-stream/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/merge-stream/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/merge-stream/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/merge-stream/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/merge-stream/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/merge-stream/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/merge-stream/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/merge-stream/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/merge-stream/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}}],"sources":{"node_modules/merge-stream/index.js":"'use strict';\n\nconst { PassThrough } = require('stream');\n\nmodule.exports = function (/*streams...*/) {\n  var sources = []\n  var output  = new PassThrough({objectMode: true})\n\n  output.setMaxListeners(0)\n\n  output.add = add\n  output.isEmpty = isEmpty\n\n  output.on('unpipe', remove)\n\n  Array.prototype.slice.call(arguments).forEach(add)\n\n  return output\n\n  function add (source) {\n    if (Array.isArray(source)) {\n      source.forEach(add)\n      return this\n    }\n\n    sources.push(source);\n    source.once('end', remove.bind(null, source))\n    source.once('error', output.emit.bind(output, 'error'))\n    source.pipe(output, {end: false})\n    return this\n  }\n\n  function isEmpty () {\n    return sources.length == 0;\n  }\n\n  function remove (source) {\n    sources = sources.filter(function (it) { return it !== source })\n    if (!sources.length && output.readable) { output.end() }\n  }\n}\n"},"lineCount":42}},"error":null,"hash":"770251032fe76b256df7daba8a8865bd","cacheData":{"env":{}}}